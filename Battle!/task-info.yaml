type: edu
custom_name: stage5
files:
- name: src/minesweeper/Main.java
  visible: true
  text: |
    package minesweeper;

    public class Main {
        public static void main(String[] args) {
            // write your code here
        }
    }
  learner_created: false
- name: test/MinesweeperTest.java
  visible: false
  text: |
    import minesweeper.Main;
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testcase.TestCase;

    import java.util.*;

    import static java.lang.Math.abs;

    class Grid {

        char[][] rows;
        Grid(String[] rows) throws Exception {
            this.rows = new char[rows.length][];
            for (int i = 0; i < rows.length; i++) {
                this.rows[i] = rows[i].toCharArray();
                for (char c : this.rows[i]) {
                    if (c != '/'
                        && c != 'x'
                        && c != '.'
                        && c != '*'
                        && !(c >= '0' && c <= '9')) {
                        throw new Exception(
                            "A row of the grid should contain " +
                                "'/', 'X', '.' or '*' or numbers. \n" +
                                "Found: '" + c + "' in row \"" + rows[i] + "\""
                        );
                    }
                }
            }
        }

        @Override
        public String toString() {
            String res = "";
            for (int i = 0; i < this.rows.length; i++) {
                res += new String(this.rows[i]) + "\n";
            }
            return res.trim();
        }

        int count(char c) {
            int sum = 0;
            for (char[] row : rows) {
                for (char ch : row) {
                    sum += ch == c ? 1 : 0;
                }
            }
            return sum;
        }

        int countAround(int x, int y, char c) {
            int[] around = new int[] {-1, 0, 1};
            int count = 0;
            for (int dx : around) {
                for (int dy : around) {

                    int newX = x + dx;
                    int newY = y + dy;

                    if (1 <= newX && newX <= 9 &&
                        1 <= newY && newY <= 9) {
                        if (get(newX, newY) == c) {
                            count++;
                        }
                    }
                }
            }
            return count;
        }

        int distanceToCenter(int x, int y) {
            return abs(x - 5) + abs(y - 5);
        }

        void replaceAround(int x, int y, char from, char to) {
            int[] around = new int[] {-1, 0, 1};
            int count = 0;
            for (int dx : around) {
                for (int dy : around) {

                    int newX = x + dx;
                    int newY = y + dy;

                    if (1 <= newX && newX <= 9 &&
                        1 <= newY && newY <= 9) {
                        if (get(newX, newY) == from) {
                            set(newX, newY, to);
                        }
                    }
                }
            }
        }

        char get(int x, int y) {
            return rows[y-1][x-1];
        }

        void set(int x, int y, char c) {
            rows[y-1][x-1] = c;
        }

        Grid copy() {
            String[] rows = new String[this.rows.length];
            for (int i = 0; i < this.rows.length; i++) {
                rows[i] = new String(this.rows[i]);
            }
            try {
                return new Grid(rows);
            } catch (Exception ex) {
                return null;
            }
        }

        int differences(Grid other) {
            int diff = 0;
            for (int x = 1; x <= 9; x++) {
                for (int y = 1; y <= 9; y++) {
                    diff += get(x, y) != other.get(x, y) ? 1 : 0;
                }
            }
            return diff;
        }

        void checkField(boolean withRealMines) throws Exception {
            for (int x = 1; x <= 9; x++) {
                for (int y = 1; y <= 9; y++) {
                    char c = get(x, y);
                    if (!withRealMines && c == 'x') {
                        throw new Exception(
                            "The word \"failed\" was not found, " +
                                "but the last grid contains 'X' characters. " +
                                "This should not be the case."
                        );
                    }
                    if (c == '/') {
                        int dotsAround = countAround(x, y, '.');
                        if (dotsAround != 0) {
                            throw new Exception(
                                "The last grid contains '.' and '/' " +
                                    "characters that are next to each other. " +
                                    "This situation is impossible."
                            );
                        }
                        if (withRealMines) {
                            int minesAround = countAround(x, y, 'x');
                            if (minesAround != 0) {
                                throw new Exception(
                                    "The last grid contains 'X' and '/' " +
                                        "characters that are next to each other. " +
                                        "This situation is impossible."
                                );
                            }
                        }
                    }
                    if (c >= '1' && c <= '9') {
                        int num = c - '0';
                        int freePlacesAround =
                            countAround(x, y, '.') +
                                countAround(x, y, '*');

                        if (withRealMines) {
                            freePlacesAround += countAround(x, y, 'x');
                        }

                        if (num > freePlacesAround) {
                            throw new Exception(
                                "There is a number " + num + " in the last grid, " +
                                    "but there are fewer free fields " +
                                    "around which to put a mine. " +
                                    "This situation is impossible."
                            );
                        }
                    }
                    if (c == '*') {
                        int guaranteedEmptyAround = countAround(x, y, '/');
                        if (guaranteedEmptyAround != 0) {
                            throw new Exception(
                                "The last grid contains '*' and '/' " +
                                    "characters that are next to each other. " +
                                    "This situation is impossible. If there is " +
                                    "'*' character that is " +
                                    "next to '/' it should be replaced to '/' " +
                                    "or to a number."
                            );
                        }
                    }
                }
            }
        }

        void checkMiddleGame() throws Exception {
            checkField(false);
        }

        void checkFail() throws Exception {
            checkField(true);
        }

        static List<Grid> parse(String output) throws Exception {

            output = output.replaceAll("│", "|");
            output = output.replaceAll("—", "-");

            List<Grid> grids = new LinkedList<>();
            String[] lines = output.split("\n");

            boolean gridStarted = false;
            List<String> newGrid = new LinkedList<>();
            for (String line : lines) {
                line = line.trim();
                if (line.contains("-|--")) {
                    gridStarted = !gridStarted;
                    if (gridStarted) {
                        newGrid = new LinkedList<>();
                    } else {
                        if (newGrid.size() != 9) {
                            throw new Exception(
                                "Found grid that contains " + newGrid.size() +
                                    " but grid should contain 9 lines. \n" +
                                    "The tests assume that the grid is " +
                                    "between the lines containing the line \"-│--\"."
                            );
                        }
                        grids.add(
                            new Grid(newGrid.toArray(new String[0]))
                        );
                    }
                    continue;
                }
                if (gridStarted) {

                    char toFind = '|';

                    long countBrackets =
                        line.chars().filter(c -> c == toFind).count();

                    if (countBrackets != 2) {
                        throw new Exception(
                            "Grid should contain " +
                                "two '|' symbols, at the beginning " +
                                "(after row number) " +
                                "and at the end of the row. \n" +
                                "Your line: \"" + line + "\"."
                        );
                    }

                    int first = line.indexOf(toFind) + 1;
                    int second = line.indexOf(toFind, first);

                    int rowSize = second - first;

                    if (rowSize != 9) {
                        throw new Exception(
                            "Every row of the grid should contain " +
                                "9 symbols between '|' chars. \nThis line has " +
                                rowSize + " symbols: \"" + line + "\"."
                        );
                    }

                    String row = line.substring(first, second);

                    newGrid.add(row);
                }
            }

            return grids;
        }

    }

    class Coords {
        int x;
        int y;
        Coords(int x, int y) {
            this.x = x;
            this.y = y;
        }
    }

    enum FirstPressStatus {
        NOT_PRESSED_FREE, PRESSED_FREE, VERIFIED_OK
    }

    class State {
        int minesCount = 0;
        FirstPressStatus isStart = FirstPressStatus.NOT_PRESSED_FREE;
        List<Coords> marks = new ArrayList<>();
    }

    public class MinesweeperTest extends StageTest<State> {

        public MinesweeperTest() {
            super(Main.class);
        }

        @Override
        public List<TestCase<State>> generate() {
            List<TestCase<State>> tests = new ArrayList<>();

            for (int i = 1; i < 70; i += i < 10 ? 1 : 5) {
                for (int j = 0; j < (i < 5 ? 20 : 2); j++) {
                    State state = new State();
                    state.minesCount = i;
                    tests.add(new TestCase<State>()
                        .addInput("" + i)
                        .addInfInput(out -> createDynamicInput(out, state))
                        .setAttach(state)
                    );
                }
            }
            return tests;
        }

        private Object createDynamicInput(String out, State state) {
            out = out.trim().toLowerCase();

            List<Grid> grids;
            try {
                grids = Grid.parse(out);
            } catch (Exception ex) {
                return CheckResult.wrong(ex.getMessage());
            }

            if (grids.size() == 0) {
                return CheckResult.wrong(
                    "Cannot find a field after the last input. Make sure you output " +
                        "this field using '|' and '-' characters."
                );
            }

            Grid grid = grids.get(0);

            state.marks.removeIf(elem -> {
                char c = grid.get(elem.x, elem.y);
                boolean isGuaranteedEmptyNow = c == '/';
                boolean isNumberNow = c >= '1' && c <= '9';
                boolean isFailed = c == 'x';
                return isGuaranteedEmptyNow || isNumberNow || isFailed;
            });

            boolean isFailed = out.contains("failed");
            boolean isWin = out.contains("congratulations");

            int starCount = grid.count('*');
            int shouldBeStars = state.marks.size();
            if (starCount != shouldBeStars && !isFailed && !isWin) {
                return CheckResult.wrong(
                    "There should be " + shouldBeStars + " '*' " +
                        "symbol" + (starCount > 1? "s": "") + " in the last " +
                        "grid. Found: " + starCount
                );
            }
            if (isFailed) {
                if (state.isStart != FirstPressStatus.VERIFIED_OK) {
                    return CheckResult.wrong(
                        "The user should not lose after the first \"free\" move."
                    );
                }
                try {
                    grid.checkFail();
                    int minesCount = grid.count('x');
                    if (minesCount != state.minesCount) {
                        return CheckResult.wrong(
                            "There " + (minesCount > 1? "are" : "is") +
                                " " + minesCount + " mine" + (minesCount > 1? "s": "") +
                                " in the last grid marked 'X'. " +
                                "But initially the user " +
                                "entered " + state.minesCount + " mine" +
                                (state.minesCount > 1? "s": "") +". " +
                                "Every real mine should be marked as 'X' at the end " +
                                "in case of failure."
                        );
                    }
                    return CheckResult.correct();
                } catch (Exception ex) {
                    return CheckResult.wrong(ex.getMessage());
                }
            }

            if (state.isStart == FirstPressStatus.PRESSED_FREE) {
                state.isStart = FirstPressStatus.VERIFIED_OK;
            }

            try {
                grid.checkMiddleGame();
            } catch (Exception ex) {
                return CheckResult.wrong(ex.getMessage());
            }

            if (isWin) {
                int freeCellsCount = grid.count('.') + grid.count('*');
                if (freeCellsCount != state.minesCount &&
                    state.marks.size() != state.minesCount) {
                    return CheckResult.wrong(
                        "The word \"congratulations\" was found, " +
                            "but not every mine was found. \n" +
                            "Mines to find: " + state.minesCount + "\n" +
                            "Free cells left: " + freeCellsCount

                    );
                }
                return CheckResult.correct();
            }

            Random random = new Random();

            int dotsCount = grid.count('.');

            if (starCount != 0 && (random.nextInt(4) == 0 || dotsCount == 0)) {
                int nextMine = random.nextInt(state.marks.size());
                Coords mineToRemove = state.marks.get(nextMine);
                state.marks.remove(mineToRemove);
                int x = mineToRemove.x;
                int y = mineToRemove.y;
                return x + " " + y + " mine";
            }

            if (dotsCount == 0) {
                return CheckResult.wrong(
                    "There are no '.' cells in the field, " +
                        "but the game is not over. Something is wrong."
                );
            }

            while (true) {
                int x = 1 + random.nextInt(9);
                int y = 1 + random.nextInt(9);

                char c = grid.get(x, y);
                if (c == '.') {
                    boolean isMine = random.nextInt(3) == 0;
                    if (isMine) {
                        state.marks.add(new Coords(x, y));
                        return x + " " + y + " mine";
                    } else {
                        if (state.isStart == FirstPressStatus.NOT_PRESSED_FREE) {
                            state.isStart = FirstPressStatus.PRESSED_FREE;
                        }
                        return x + " " + y + " free";
                    }
                }
            }
        }

        @Override
        public CheckResult check(String reply, State attach) {
            reply = reply.toLowerCase();

            boolean isFailed = reply.contains("failed");
            boolean isWin = reply.contains("congratulations");

            if (!isFailed && !isWin) {
                return CheckResult.wrong(
                    "No words " +
                        "\"congratulations\" or \"failed\" were found. " +
                        "The program must end in one of these ways."
                );
            }

            return CheckResult.correct();
        }
    }
  learner_created: false
- name: src/minesweeper/UI/UserInterface.java
  visible: true
  text: |
    package minesweeper.UI;

    import minesweeper.logic.MineSweeper;

    import java.util.Scanner;

    public class UserInterface {
        private MineSweeper mineSweeper;
        private Scanner scanner;

        public UserInterface(Scanner scanner) {
            this.mineSweeper = new MineSweeper();
            this.scanner = scanner;
        }

        public void start(){
            System.out.println("How many mines do you want on the field?");
            int x = Integer.parseInt(scanner.nextLine());
            mineSweeper.generateMines(x);
            play();
        }

        private void play(){
            boolean allHit=false;
            while (!allHit){
                mineSweeper.print();
                System.out.println("Set/delete mines marks (x and y coordinates):");
                int y = scanner.nextInt()-1;
                int x = scanner.nextInt()-1;
                mineSweeper.mark(x,y);
                allHit=mineSweeper.check();
            }
            System.out.println("Congratulations! You found all mines!");
        }
    }
  learner_created: true
- name: src/minesweeper/domain/Mine.java
  visible: true
  text: |
    package minesweeper.domain;

    import java.util.Objects;

    public class Mine {
        private int x;
        private int y;
        private boolean hit;

        public Mine(int x, int y) {
            this.x = x;
            this.y = y;
            hit=false;
        }

        public int getX() {
            return x;
        }

        public int getY() {
            return y;
        }

        public boolean isHit() {
            return hit;
        }

        public void setHit(boolean hit) {
            this.hit = hit;
        }

        @Override
        public boolean equals(Object o) {
            if (this == o) return true;
            if (o == null || getClass() != o.getClass()) return false;
            Mine mine = (Mine) o;
            return x == mine.x &&
                    y == mine.y;
        }

        @Override
        public int hashCode() {
            return Objects.hash(x, y);
        }
    }
  learner_created: true
- name: src/minesweeper/logic/MineSweeper.java
  visible: true
  text: |+
    package minesweeper.logic;

    import minesweeper.domain.Mine;
    import java.util.ArrayList;
    import java.util.Arrays;
    import java.util.Random;

    public class MineSweeper {
        private String [][] minesSweeperBoard;
        private final Random random;
        private ArrayList<Mine> mines;

        {
            this.minesSweeperBoard = new String[9][9];
            for(int r = 0;r<9;r++){
                for(int c =0;c<9;c++){
                    minesSweeperBoard[r][c]=".";
                }
            }
        }


        public MineSweeper() {
            //this.minesSweeperBoard = new String[9][9];
            this.mines=new ArrayList<>();
            this.random = new Random();
        }


        public void generateMines(int minesAmount){
            //ArrayList<Mine> mines = new ArrayList<>();
            for(int i = 0 ;i<minesAmount;i++){
                int x = random.nextInt(9);
                int y = random.nextInt(9);
                Mine mine = new Mine(x,y);
                while (mines.contains(mine)){
                    x = random.nextInt(9);
                    y = random.nextInt(9);
                    mine = new Mine(x,y);
                }
                mines.add(mine);
            }
            placeMines();
        }

        public void placeMines(){
           for(Mine m : mines){
              minesSweeperBoard[m.getX()][m.getY()]="X";
            }
            countMines();
        }


        private void countMines(){
            for(int r=0;r<9;r++){
                for(int c=0;c<9;c++){
                    if(minesSweeperBoard[r][c].equals(".")){
                        String[][] tempArray = new String[3][3];
                        int i =0;
                        int count =0;
                        for(int r1=r-1;r1<r+2;r1++){
                            if(r1<0||r1>8) continue;
                            try {
                                tempArray[i] = Arrays.copyOfRange(minesSweeperBoard[r1],c-1,c+2);
                                i++;
                            } catch (Exception e) {
                                tempArray[i] = Arrays.copyOfRange(minesSweeperBoard[r1],c,c+2);
                                i++;
                            }
                        }
                        for(String[] row: tempArray){
                            for (String s: row){
                                if("X".equals(s)){
                                    count++;
                                }
                            }
                        }
                        if(count>0){
                            minesSweeperBoard[r][c]= String.valueOf(count);
                        }
                    }
                }
            }
        }

        public void print(){
            System.out.println(" |123456789|");
            System.out.println("-|---------|");
            int i=1;
            for (String [] row: minesSweeperBoard){
                System.out.print(i+"|");
                i++;
                for(String s: row){
                    System.out.print("X".equals(s)? ".":s);
                }
                System.out.println("|");

            }
            System.out.println("-|---------|");
        }

        public void mark(int x, int y){
            Mine mine= new Mine(x,y);

            if(minesSweeperBoard[x][y].matches("\\d")){
                System.out.println("There is a number here!");
            }else if(minesSweeperBoard[x][y].equals("*")){
                if(mines.contains(mine)){
                    mines.get(mines.indexOf(mine)).setHit(false);
                }
                minesSweeperBoard[x][y]=".";
            } else{
                if(mines.contains(mine)){
                    mines.get(mines.indexOf(mine)).setHit(true);
                }
                minesSweeperBoard[x][y]="*";
            }
        }

        public boolean check() {
            int number = 0;
            for(Mine m : mines){
                if(m.isHit()){
                    number++;
                }
            }
            return number==mines.size();
        }
    }

  learner_created: true
feedback_link: https://hyperskill.org/projects/77/stages/430/implement
status: Solved
feedback:
  message: Congratulations! Continue on <a href="https://hyperskill.org/projects/77/stages/430/implement">JetBrains
    Academy</a>
  time: Sun, 20 Sep 2020 21:30:14 UTC
record: -1
