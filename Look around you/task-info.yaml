type: edu
custom_name: stage3
files:
- name: src/minesweeper/Main.java
  visible: true
  text: |
    package minesweeper;

    public class Main {
        public static void main(String[] args) {
            // write your code here
        }
    }
  learner_created: false
- name: test/MinesweeperTest.java
  visible: false
  text: |
    import minesweeper.Main;
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testcase.TestCase;
    import org.hyperskill.hstest.testing.TestedProgram;

    import java.util.*;
    import java.util.stream.Collectors;

    public class MinesweeperTest extends StageTest<Integer> {
        @Override
        public List<TestCase<Integer>> generate() {
            List<TestCase<Integer>> tests = new ArrayList<>();
            for (int i = 1; i <= 50; i++) {
                int mines = i;
                TestCase<Integer> test = new TestCase<Integer>()
                    .setDynamicTesting(() -> {
                        TestedProgram main = new TestedProgram(Main.class);
                        main.start();
                        String output = main.execute("" + mines);
                        return test(output, mines);
                    });
                tests.add(test);
                tests.add(test);
            }
            return tests;
        }

        public CheckResult test(String reply, Integer attach) {
            List<String> lines =
                Arrays.stream(reply.split("\n"))
                    .map(String::trim)
                    .collect(Collectors.toList());

            if (lines.isEmpty()) {
                return CheckResult.wrong(
                    "Looks like you didn't output a single line!"
                );
            }

            if (lines.size() != 9) {
                return CheckResult.wrong(
                    "You should output exactly 9 lines of the field. Found: " + lines.size() + "."
                );
            }

            int mines = 0;

            for (String line : lines) {
                if (line.length() != 9) {
                    return CheckResult.wrong(
                        "One of the lines of the field doesn't have 9 symbols, " +
                            "but has " + line.length() + ".\n" +
                            "This line is \"" + line + "\""
                    );
                }

                for (char c : line.toCharArray()) {
                    if (c != 'X' && c != '.' && !(c >= '0' && c <= '9')) {
                        return CheckResult.wrong(
                            "One of the characters is not equal to 'X' or '.' or to a number.\n" +
                                "In this line: \"" + line + "\"."
                        );
                    }
                    if (c == 'X') {
                        mines++;
                    }
                }
            }

            if (attach != mines) {
                return CheckResult.wrong(
                    "Expected to see " + attach + " mines, found " + mines
                );
            }

            int[] around = new int[] {-1, 0, 1};

            for (int y = 0; y < lines.size(); y++) {
                String line = lines.get(y);
                for (int x = 0; x < line.length(); x++) {
                    char c = line.charAt(x);

                    if (c == 'X') {
                        continue;
                    }

                    int minesAround = 0;

                    for (int dx : around) {
                        for (int dy : around) {

                            int newX = x + dx;
                            int newY = y + dy;

                            if (0 <= newX && newX < 9 &&
                                0 <= newY && newY < 9) {

                                char newC = lines.get(newY).charAt(newX);

                                if (newC == 'X') {
                                    minesAround++;
                                }
                            }
                        }
                    }

                    if (minesAround == 0 && c != '.') {
                        return CheckResult.wrong(
                            "There are no mines around, but found number " + c + ".\n" +
                                "In line " + (y+1) + ", symbol " + (x+1) + "."
                        );
                    }

                    if (minesAround != 0 && c != '0' + minesAround) {
                        return CheckResult.wrong(
                            "In this cell should be number " + minesAround + ", " +
                                "but found symbol \"" + c + "\".\n" +
                                "In line " + (y+1) + ", symbol " + (x+1) + "."
                        );
                    }

                }
            }

            return CheckResult.correct();
        }
    }
  learner_created: false
- name: src/minesweeper/UI/UserInterface.java
  visible: true
  text: |
    package minesweeper.UI;

    import minesweeper.logic.MineSweeper;

    import java.util.Scanner;

    public class UserInterface {
        private MineSweeper mineSweeper;
        private Scanner scanner;

        public UserInterface(Scanner scanner) {
            this.mineSweeper = new MineSweeper();
            this.scanner = scanner;
        }

        public void start(){
            System.out.println("How many mines do you want on the field?");
            int x = Integer.parseInt(scanner.nextLine());
            mineSweeper.placeMines(x);
            mineSweeper.print();
        }
    }
  learner_created: true
- name: src/minesweeper/domain/Mine.java
  visible: true
  text: |
    package minesweeper.domain;

    import java.util.Objects;

    public class Mine {
        private int x;
        private int y;

        public Mine(int x, int y) {
            this.x = x;
            this.y = y;
        }

        public int getX() {
            return x;
        }

        public int getY() {
            return y;
        }

        @Override
        public boolean equals(Object o) {
            if (this == o) return true;
            if (o == null || getClass() != o.getClass()) return false;
            Mine mine = (Mine) o;
            return x == mine.x &&
                    y == mine.y;
        }

        @Override
        public int hashCode() {
            return Objects.hash(x, y);
        }
    }
  learner_created: true
- name: src/minesweeper/logic/MineSweeper.java
  visible: true
  text: |+
    package minesweeper.logic;

    import minesweeper.domain.Mine;
    import java.util.ArrayList;
    import java.util.Random;

    public class MineSweeper {
        private String [][] minesSweeperBoard;
        //private ArrayList<Mine> mines;
        private Random random;

        public MineSweeper() {
            this.minesSweeperBoard = new String[9][9];
            //this.mines=new ArrayList<>();
            this.random = new Random();
            backGround();
        }

        private void backGround(){
            for(int r = 0;r<9;r++){
                for(int c =0;c<9;c++){
                    minesSweeperBoard[r][c]=".";
                }
            }
        }

        private ArrayList<Mine> generateMines(int minesAmount){
            ArrayList<Mine> mines = new ArrayList<>();
            for(int i = 0 ;i<minesAmount;i++){
                int x = random.nextInt(9);
                int y = random.nextInt(9);
                Mine mine = new Mine(x,y);
                while (mines.contains(mine)){
                    x = random.nextInt(9);
                    y = random.nextInt(9);
                    mine = new Mine(x,y);
                }
                mines.add(mine);
            }
            return mines;
        }

        public void placeMines(int minesAmount){
            ArrayList<Mine> mines = generateMines(minesAmount);
            for(Mine m : mines){
                minesSweeperBoard[m.getX()][m.getY()]="X";
            }
        }

        public void print(){
            for (String [] row: minesSweeperBoard){
                for(String s: row){
                    System.out.print(s);
                }
                System.out.println();
            }
        }
    }

  learner_created: true
feedback_link: https://hyperskill.org/projects/77/stages/428/implement
status: Solved
feedback:
  message: Congratulations! Continue on <a href="https://hyperskill.org/projects/77/stages/428/implement">JetBrains
    Academy</a>
  time: Mon, 14 Sep 2020 19:31:57 UTC
record: 3
